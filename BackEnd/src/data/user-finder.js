/**
 * Created by Quentin on 1/7/2016.
 *
 * This module is used to find information about the user in the collection "users".
 */

var ObjectID = require('mongodb').ObjectID;
var core = require("../../app/core/core");

/**
 * This function try to find the user in the database FXMachine and in the collection users. If the user is found
 * then the callback is called, with all the information about the user, otherwise an error is send.
 *
 * @param user      {json}      JSONObject with at least one information about the user
 * @param callback  {function}  Function that will be call when the result is found or not.
 */
function myfindOne(user, callback) {
    core.getDb(function(db) {
        var collection = db.collection('users');
        collection.find({_email : user._email } ).toArray(function (err, result) {
            if (err) {
                console.log(err);
                callback(500);
            } else if (result.length) {
                console.log('Found:', result);
                callback(result);
            } else {
                console.log(result);
                callback(404);
                console.log('No document(s) found with defined "find" criteria!');
            }
        });
    });
}

/**
 * This function is used to find all the user in the collection "users".
 *
 * @param       {function}      This callback function take two parameter, the first one is the error message, null
 *                              if there is no error, and the second one is the result message, null if there is an error.
 */
function findAllUser(callback) {
    core.getDb(function(db) {
        var collection = db.collection('users');
        collection.find({ }).toArray(function(err, result) {
            if(err) {
                callback(err, null);
            } else {;
                callback(null, result);
            }
        });
    });
}

/**
 * This function check the right of the user. If the user is not admin then the access is denied.
 *
 * @param       {uuid}          The id is the uuid of a user with the role admin the database.
 * @param       {collection}    The collection where the id will be checked.
 * @param       {function}      This callback is the function that will take one parameter, true if the access is allow
 *                              false otherwise.
 */
function checkRights(id, collection, callback) {
    var o_id = new ObjectID(id);
    collection.findOne({ _id : o_id} , function(err, result) {
        if(result.role == "admin") {
            callback(true);
        } else {
            callback(false);
        }
    });
}

/**
 * This method will retrieve the list of pedal for the user with the given id.
 *
 * @param   id          {uuid}      id of the user generated by mongodb
 * @param   callback    {function}  function with two parameter, the first one is error and the second one is the result
 */
function getUserPedal(id, callback) {
    core.getDb(function(db) {
        var o_id = new ObjectID(id);
        var collection = db.collection('users');
        collection.find({_id : o_id }).toArray(function(err, result) {
            if(err) {
                callback(err);
            } else {
                if(typeof result[0]._pedals === 'undefined') {
                    callback([]);
                } else {
                    callback(result[0]._pedals);
                }
            }
        });
    });
}

/**
 * This method will check if there is an user with the given id and will return all the information about
 * the user in the callback. The callback will receive an error otherwise.
 *
 * @param   id          {uuid}      id of the user generated by mongodb.
 * @param   callback    {function}  callback with two param error and result.
 */
function findUserWithId(id, callback) {
    core.getDb(function(db) {
        var o_id = new ObjectID(id);
        var collection = db.collection('users');
        collection.findOne({ _id : o_id}, function(err, result) {
            if(err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    });
}

exports.findUserWithId = findUserWithId;

exports.getUserPedal = getUserPedal;

exports.findOne = myfindOne;

exports.findAllUser = findAllUser;